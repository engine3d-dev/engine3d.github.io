{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfe1 HomeWelcome to Engine3D","text":""},{"location":"#overview","title":"Overview","text":"<p>Engine3D exists to help students to be able to learn how to architecturally develop complex subsystems, providing solutions to wide variations of problems.</p> <p>\ud83d\udea7 NOTE: Documentation Website Still In-Progress \ud83d\udea7</p> <p>Engine3D's design rules should be:</p> <ol> <li>Portable and Cross-platform support.</li> <li>OS Platform-agnostic.</li> <li>Graphics API-agnostic rendering</li> <li>Safe, Reliable, and Testable or can be Tested.</li> <li>Easy build.</li> </ol>"},{"location":"#basics","title":"Basics","text":"<p>Engine3D is a multipurpose open-source engine. They are used for game development, animations, film-making, and running simulations. At the core of Engine3D will be our internal architectures for boilerplate foundations, graphics API-agnostic APIs, UI wrappers, and code-specific runtime utilities, loggers, and other implementations. Decoupling to enable applications to be generic enough allowing users and students alike to build applications for certain targeted platforms.</p>"},{"location":"#what-and-why","title":"What and Why?","text":"<p>Around last year, I decided to build a game engine that was going to be used to develop a 2D/3D rendering. Then created this project out of passion for developing not just games, but also allowing to run animations, simulations, and various other systems in engine architecture. While having the ability to create a  multipurpose engine using internal technologies integrated into this engine.</p>"},{"location":"#some-features","title":"Some features","text":"<ul> <li>Written in C++ with supporting Windows and Linux.</li> <li>C# .NET Core scripting (like Unity).</li> <li>Vulkan/DirectX/Metal for rendering with an API-agnostic renderer.</li> <li>Multi-threaded runtime (main thread + render thread).</li> <li>Physically-based forward + HDR Rendering</li> <li>Animations + Simulations</li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#engine3d","title":"Engine3D","text":"<p>Engine3D is an interactive 3D cross-platform application - otherwise a game engine. Engine3D was a project that I had started towards the end of 2023, developed by Aaron (SpinnerX). Deciding on this project to become open-source starting Fall 2024. </p> <p>Engine3D-Dev is the organization that helps maintain the Engine3D project, working to build engine3d to enable users to make commercialized games, artwork for assets, animations, and other forms of engine capabilities. Aaron created Engine3D for students who are passionate about both making games and interested in being part of a community in developing a game engine. Where you can make commercialized games using our internal toolings that Engine3D would provide.</p>"},{"location":"about/#why-make-a-game-engine-what-started-this-project","title":"Why make a Game Engine? What started this project?","text":"<p>To describe simply: because of having a passion for engine development and the curiosity to get better at designing APIs architecturally, thinking outside the box.</p> <p>To explain further, Aaron started this project building a game engine for a few reasons: passion creativity, and curiosity in how various technologies operate in an engine. This is because when looking at a game engine. There is a wide variety of subsystems that are involved to making an engine work. Meaning there is always room to continue learning and growing from both technical and design standpoints.</p>"},{"location":"about/#plans-for-the-future","title":"Plans for the future","text":"<ul> <li> <p>Continue developing for Engine3D to build very interesting projects.</p> </li> <li> <p>Open-source project for users and developers to have a tool to develop games with familiar API.</p> </li> <li> <p>Develop commercialized games that can be used to export in game jams having a sense of satisfaction on a project they know they've worked on.</p> </li> </ul>"},{"location":"page2/","title":"\ud83d\udef8 Getting Started","text":""},{"location":"page2/#prerequisites","title":"\u2705 Prerequisites","text":"<p>These are needed before working to get engine3d building successfully on your platform.</p> <ul> <li><code>python</code>: 3.10 or above</li> <li><code>conan</code>: 2.2.0 or above</li> <li><code>llvm</code>: 17 or above</li> <li><code>make</code>: CMake downloaded using conan to build Engine3D</li> <li><code>git</code>: (only needs to be installed via installer on Windows)</li> </ul> WindowsUbuntu <p>Tip</p> <p>Installing DirectX is optional, since Engine3D does not support it yet.</p> <p>Adding it as an option for future change to using DirectX when you run on Windows.</p> <p>It is recommended to use Choco for an easy install for the Windows platform.</p> <p>To install <code>choco</code>, open powershell with admin access and run the following command in your terminal:</p> <pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n</code></pre> <p>Tip</p> <p>If <code>choco</code> command does not work after running this script try closing and reopening powershell again. When <code>choco</code> prompts you to run install scripts from the commands below, enter <code>all</code> so it can install everything.</p> <p>After installing MinGW, add <code>C:\\Users\\&lt;username&gt;\\ProgramData\\chocolatey\\bin</code> to your environment variable path to make it available globally. Creating a copy in the <code>make.exe</code> and renaming it to <code>mingw32-make.exe</code> to get make working. If you do not do this, you will get the <code>CMAKE_MAKE_PROGRAM not set</code> error.</p> <p>Install <code>git</code> (powershell must be admin):</p> <pre><code>choco install git\n</code></pre> <p>Install <code>mingw</code> (powershell must be admin):</p> <pre><code>choco install mingw\n</code></pre> <p>Install <code>python</code> (powershell must be admin):</p> <pre><code>choco install python --version=3.12.0\n</code></pre> <p>Install <code>llvm</code> (powershell must be admin):</p> <pre><code>choco install llvm\n</code></pre> <p>Install <code>directx</code> (Optional)</p> <pre><code>choco install directx\n</code></pre> <p>Install <code>conan</code> (powershell must be admin) <pre><code>python -m pip install -U \"conan&gt;=2.2.2\"\n</code></pre></p> <p>Install wget if it isn't already on your system <code>sudo apt-get install wget</code></p> <p>Install the latest version of <code>llvm</code></p> <pre><code>wget https://apt.llvm.org/llvm.sh\nchmod +x llvm.sh\nsudo ./llvm.sh\n</code></pre> <p>Info</p> <p>If your using 20.04, you have to upgrade Python to 3.10</p> <pre><code>sudo apt update\nsudo apt install software-properties-common -y\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt install Python3.10\n</code></pre> <p>Installing Conan <pre><code>python -m pip install -U \"conan&gt;=2.2.2\"\n</code></pre></p>"},{"location":"page2/#setting-up-conan","title":"Setting up Conan","text":"<p>Setting up a conan profile for your specific platforms.</p> WindowsX86 Linux <p>If you are on an x86 architecture for Windows.</p> <pre><code>conan config install -sf profiles/x86_64/Windows/ -tf profiles https://github.com/engine3d-dev/conan-config.git\n</code></pre> <p>If you are on a linux platform that uses an x86 architecture.</p> <pre><code>conan config install -sf profiles/x86_64/linux/ -tf profiles https://github.com/engine3d-dev/conan-config.git\n</code></pre>"},{"location":"page2/#building-engine3d","title":"Building Engine3D","text":"<p>Cloning the engine3d repository</p> <p>Tip</p> <p>Add this flag at the end <code>-b missing</code> when conan cannot find packages in conan's cache. This means to build our packages and install any missing packages that we might have</p> <ul> <li> <p><code>conan create</code> command will install all the dependencies of engine3d and will build the project.</p> </li> <li> <p><code>conan build .</code> will build the entire project</p> </li> </ul> <pre><code>git clone https://github.com/engine3d-dev/engine3d\ncd engine3d/\n\nconan create .\n\nconan build .\n</code></pre>"},{"location":"page2/#running-editor","title":"Running Editor","text":"<p>The editor executable will be in <code>build/clang-17-x86_64-23-release/Editor/Editor.exe</code></p> <p>You can simply run the editor just by doing <code>.\\build/clang-17-x86_64-23-release/Editor/Editor.exe</code></p> <p>Depending on your current platform the editor executable will be in <code>./build/&lt;arch-Release&gt;/Editor/Editor.exe</code></p>"},{"location":"page2/#different-build-types","title":"Different Build Types","text":"<p>There are two different build types that you can build engine3d in, <code>Release</code> and <code>Debug</code>.</p> <p><code>Release</code> will be turning on optimization and making your code size.</p> <p><code>Debug</code> is much slower than <code>Release</code>. Not recommended because used for testing and enabling debugging information.</p>"},{"location":"page3/","title":"Docs","text":""},{"location":"page3/#build-and-running","title":"Build and Running","text":""},{"location":"page3/#visual-studio-code","title":"Visual Studio Code","text":"<p>Assuming that all prerequisites are already installed, proceeding to the following:</p> <ol> <li> <p>Clone the repository: <code>git clone https://github.com/sfsu-dev/engine3d</code></p> </li> <li> <p>Installing dependencies using conan: <code>conan install . --build=missing</code></p> </li> <li> <p>Running the build: <code>conan build .</code></p> </li> <li> <p>Your executable to run the basic program would be from Sandbox in <code>build/Release/Sandbox/Sandbox.exe</code></p> </li> <li>If running with Visual Studio then make sure that is installed and run the build process</li> <li>Once generated the solutions file, run that solutions file in Visual Studio.</li> </ol>"},{"location":"page3/#how-layers-work-in-engine3d","title":"How Layers work in Engine3D","text":"<p>Creating a basic application requires an <code>engine3d::Layer</code> to render the scene(s) to our application. Where we have our single instance of an application that will be our actual runtime application state. Now the application will take in these layers, overlapping them to be able to develop more complex scenes in our engine. As the engine is a layered-based layout on the client side.</p> <ul> <li> <p>Engine3D from the user-space perspective is layer-based, which means that you are going to have different layers as different endpoints of your game or application. Suppose looking at the following example below.</p> </li> <li> <p>What does layer-based mean? This means how we handle frames are by overlapping these layers in sequence to play each frames.</p> </li> <li> <p>The following example, shows that we have a <code>MainLayer</code> that acts as our game layer with a few overridden methods.</p> </li> </ul>"},{"location":"page3/#layer-methods","title":"Layer Methods","text":"<p>Let's take a look at these methods:</p> <p><code>BeginPlay()</code>: is our initialization function that handles our behaviors for how you initialize your world. <code>EndPlay()</code>: handling cleanly closing our applications or handling any tasks cleanup that is needed at runtime, if needed. <code>UpdateEvent(Event&amp;)</code>: handles all of our events being polled from engine3d. <code>UpdateLayer()</code>: handles updating our layer for each frame in our application <code>UpdateUI()</code>: This function handles any UI handling users may want to do within their application.</p> Application.cpp<pre><code>#include &lt;engine3d/core/Layer.h&gt;\n\nnamespace engine3d{\n    class MainLayer : public Layer{\n        void BeginPlay() override {}\n\n        void EndPlayer() override {}\n\n        void UpdateEvent(Event&amp; event) override {}\n\n        void UpdateLayer() override {}\n\n        void UpdateUI() override {}\n    };\n\n\n    class ClientApplication : public engine3d::BlankApplicationSlate {\n    public:\n        ClientApplication(){\n            this-&gt;PushLayer(new MainLayer());\n        }\n    };\n};\n</code></pre>"},{"location":"tabs/","title":"Tabs","text":"<ul> <li>home</li> <li>About</li> <li>Getting Started</li> <li>Used Guide</li> <li>[API]</li> </ul>"}]}